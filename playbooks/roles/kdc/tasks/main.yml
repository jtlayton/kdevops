---
- name: Get OS-specific variables
  ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - '{{ansible_distribution}}.yml'
        - '{{ansible_os_family}}.yml'
        - default.yml
      paths:
        - 'vars'

- name: Debian-specific setup
  ansible.builtin.include_tasks: roles/kdc/tasks/install-deps/debian/main.yml
  when: ansible_os_family == 'Debian'

- name: SuSE-specific setup
  ansible.builtin.include_tasks: roles/kdc/tasks/install-deps/suse/main.yml
  when: ansible_os_family == 'Suse'

- name: Red Hat-specific setup
  ansible.builtin.include_tasks: roles/kdc/tasks/install-deps/redhat/main.yml
  when: ansible_os_family == 'RedHat'

- name: Configure /etc/krb5.conf
  become: yes
  become_method: sudo
  template:
    src: krb5.conf.j2
    dest: /etc/krb5.conf
    owner: root
    group: root
    mode: 0644

- name: Ensure /etc/krb5.conf.d exists
  become: yes
  become_method: sudo
  ansible.builtin.file:
    path: /etc/krb5.conf.d
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Configure {{ kdc_conf_dir }}/kdc.conf
  become: yes
  become_method: sudo
  template:
    src: kdc.conf.j2
    dest: "{{ kdc_conf_dir }}/kdc.conf"
    owner: root
    group: root
    mode: 0600

- name: Configure {{ kdc_data_dir }}/kadm5.acl
  become: yes
  become_method: sudo
  template:
    src: kadm5.acl.j2
    dest: "{{ kdc_data_dir }}/kadm5.acl"
    owner: root
    group: root
    mode: 0600

- name: Check to see if Kerberos database exists
  become: yes
  become_method: sudo
  ansible.builtin.stat:
    path: "{{ kdc_data_dir }}/principal"
  register: kerberos_db

- name: Create database
  become: yes
  become_method: sudo
  ansible.builtin.shell:
    cmd: kdb5_util -P {{ krb5_admin_pw }} create -s
  when: not kerberos_db.stat.exists

- name: Create admin principal
  become: yes
  become_method: sudo
  ansible.builtin.shell:
    cmd: kadmin.local -q "addprinc -pw {{ krb5_admin_pw }} root/admin"

- name: Allow access to kerberos service in firewalld
  become: yes
  become_method: sudo
  ansible.posix.firewalld:
    service: kerberos
    permanent: true
    immediate: true
    state: enabled
  when: ansible_os_family == 'RedHat'

- name: Allow access to kadmin service in firewalld
  become: yes
  become_method: sudo
  ansible.posix.firewalld:
    service: kadmin
    permanent: true
    immediate: true
    state: enabled
  when: ansible_os_family == 'RedHat'

- name: Start and enable {{ krb5kdc_service_name }} systemd service
  become: yes
  become_method: sudo
  ansible.builtin.systemd:
    name: "{{ krb5kdc_service_name }}"
    enabled: true
    state: started

- name: Start and enable {{ kadmin_service_name }} systemd service
  become: yes
  become_method: sudo
  ansible.builtin.systemd:
    name: "{{ kadmin_service_name }}"
    enabled: true
    state: started
