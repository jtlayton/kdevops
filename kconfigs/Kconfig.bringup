config BRINGUP_SUPPORTS_CXL
	bool

choice
	prompt "Node bring up method"
	default VAGRANT

config VAGRANT
	bool "Vagrant for local virtualization (KVM / VirtualBox)"
	select KDEVOPS_SSH_CONFIG_UPDATE_STRICT
	select EXTRA_STORAGE_SUPPORTS_ZNS
	select EXTRA_STORAGE_SUPPORTS_LARGEIO
	select BRINGUP_SUPPORTS_CXL
	depends on TARGET_ARCH_X86_64
	help
	  This option will enable use of Vagrant. Enable this if you want to
	  use local virtualization technologies such as KVM with libvirt or
	  VirtualBox. Enabling this feature will enable you to select which
	  target guests to use, and configures things for you. It will also
	  ensure dependencies are installed for Vagrant when running:

	    make deps

config GUESTFS
	bool "Use guestfs-tools for local virtualization via KVM and libvirt (EXPERIMENTAL)"
	select EXTRA_STORAGE_SUPPORTS_LARGEIO
	help
	  This option will use libguestfs utilities instead of Vagrant to build
	  guest images and spin them up using libvirt with KVM.

config TERRAFORM
	bool "Terraform for cloud environments"
	select EXTRA_STORAGE_SUPPORTS_512
	select EXTRA_STORAGE_SUPPORTS_1K
	select EXTRA_STORAGE_SUPPORTS_2K
	select EXTRA_STORAGE_SUPPORTS_4K
	help
	  This option will enable use of Vagrant. Enable this if you want to
	  use terraform to create nodes on a cloud environment such as:

	    * Azure
	    * AWS
	    * OpenStack
	    * GCE

	  Enabling this option will enable installing terraform dependencies
	  when you run:

	    make deps

	  If you are not using a cloud environment just disable this.

config SKIP_BRINGUP
	bool "Skip bring up - bare metal or existing nodes"
	select EXTRA_STORAGE_SUPPORTS_512
	select EXTRA_STORAGE_SUPPORTS_1K
	select EXTRA_STORAGE_SUPPORTS_2K
	select EXTRA_STORAGE_SUPPORTS_4K
	help
	  This option will skip bring up, as you already have existing
	  systems up and available and ssh'able. This might be the case
	  if you are working with bare metal systems or systems you may
	  have already provisioned through other means.

endchoice

if GUESTFS

choice
	prompt "Guestfs Linux distribution to use"
	default GUESTFS_FEDORA

config GUESTFS_FEDORA
	bool "Fedora (or derived distro)"
	select HAVE_DISTRO_XFS_PREFERS_MANUAL if FSTESTS_XFS
	select HAVE_DISTRO_BTRFS_PREFERS_MANUAL if FSTESTS_BTRFS
	select HAVE_DISTRO_EXT4_PREFERS_MANUAL if FSTESTS_EXT4
	select HAVE_DISTRO_PREFERS_FSTESTS_WATCHDOG if KDEVOPS_WORKFLOW_ENABLE_FSTESTS
	select HAVE_DISTRO_PREFERS_FSTESTS_WATCHDOG_KILL if KDEVOPS_WORKFLOW_ENABLE_FSTESTS
	help
	  This option will set the target guest to be a distro in the Fedora family.
	  For example, Fedora, RHEL, etc.

config GUESTFS_DEBIAN
	bool "Debian"
	select HAVE_CUSTOM_DISTRO_HOST_PREFIX
	select HAVE_DISTRO_XFS_PREFERS_MANUAL if FSTESTS_XFS
	select HAVE_DISTRO_BTRFS_PREFERS_MANUAL if FSTESTS_BTRFS
	select HAVE_DISTRO_EXT4_PREFERS_MANUAL if FSTESTS_EXT4
	select HAVE_DISTRO_PREFERS_CUSTOM_HOST_PREFIX
	select HAVE_DISTRO_PREFERS_FSTESTS_WATCHDOG if KDEVOPS_WORKFLOW_ENABLE_FSTESTS
	select HAVE_DISTRO_PREFERS_FSTESTS_WATCHDOG_KILL if KDEVOPS_WORKFLOW_ENABLE_FSTESTS
	help
	  This option will set the target guest to Debian.

endchoice

config VIRT_BUILDER_OS_VERSION
       string "virt-builder os-version"
       default "fedora-39" if GUESTFS_FEDORA
       default "debian-12" if GUESTFS_DEBIAN
       help
         Have virt-builder use this os-version string to
         build a root image for the guest. Run "virt-builder -l"
         to get a list of operating systems and versions supported
         by guestfs.

if GUESTFS_DEBIAN

config GUESTFS_DEBIAN_BOX_SHORT
        string
        default "debian12" if GUESTFS_DEBIAN

endif

endif # GUESTFS

config LIBVIRT
	bool
	depends on VAGRANT_LIBVIRT_SELECT || GUESTFS
	default y

source "vagrant/Kconfig"
source "terraform/Kconfig"
if LIBVIRT
source "kconfigs/Kconfig.libvirt"
endif
